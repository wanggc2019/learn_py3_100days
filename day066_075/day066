2020/4/16

****网络爬虫和相关工具****

1、网络爬虫概念
也称网络蜘蛛
是按照一定规则自动浏览万维网并获取信息的机器人程序

应用领域：
搜索引擎、新闻聚合、社交应用、舆情监控、行业数据

2、合法性和背景调研
法律未完善，遵守Robots协议。

3、相关工具
HTTP协议：我们在网页上看到的内容通常是浏览器执行HTML语言得到的结果，而HTTP就是传输HTML数据的协议。HTTP和其他很多应用级协议一样是构建在TCP
（传输控制协议）之上的，它利用了TCP提供的可靠的传输服务实现了Web应用中的数据交换

Chrome Developer Tools：谷歌浏览器内置的开发者工具。
POSTMAN：功能强大的网页调试与RESTful请求工具
HTTPie：命令行HTTP客户端。
==

4、一个简单的爬虫
数据采集(网页下载)->数据分析（网页解析）->数据存储（将需要的信息持久化）



****数据采集和解析****

1、工具
下载数据 - urllib / requests / aiohttp。
解析数据 - re / lxml / beautifulsoup4 / pyquery。
缓存和持久化 - pymysql / sqlalchemy / peewee/ redis / pymongo。
生成数字签名 - hashlib。
序列化和压缩 - pickle / json / zlib。
调度器 - 多进程（multiprocessing） / 多线程（threading）。

2、页面解析方式：
解析方式	        对应的模块	速度	  使用难度	备注
正则表达式解析	  re	      快	     困难	常用正则表达式，在线正则表达式测试
XPath解析	     lxml	      快	     一般	需要安装C语言依赖库，唯一支持XML的解析器
CSS选择器解析	  bs4 / pyquery	  不确定 简单

3、BeautifulSoup的使用
BeautifulSoup是一个可以从HTML或XML文件中提取数据的Python库。它能够通过你喜欢的转换器实现惯用的文档导航、查找、修改文档的方式。


****存储数据****
1、存储海量数据
数据持久化的首选方案应该是关系型数据库

2、数据缓存
可以使用Redis来提供高速缓存服务


****并发下载****

1、多线程和多进程回顾
threading.local类
concurrent.futures模块
分布式进程

2、协程和异步I/O

协程（coroutine）通常又称之为微线程或纤程，它是相互协作的一组子程序（函数）。所谓相互协作指的是在执行函数A时，可以随时中断去执行函数B，然
后又中断继续执行函数A。注意，这一过程并不是函数调用（因为没有调用语句），整个过程看似像多线程，然而协程只有一个线程执行。协程通过yield关键
字和 send()操作来转移执行权，协程之间不是调用者与被调用者的关系。

协程的优势在于以下两点：

执行效率极高，因为子程序（函数）切换不是线程切换，由程序自身控制，没有切换线程的开销。
不需要多线程的锁机制，因为只有一个线程，也不存在竞争资源的问题，当然也就不需要对资源加锁保护，因此执行效率高很多。
说明：协程适合处理的是I/O密集型任务，处理CPU密集型任务并不是它的长处，如果要提升CPU的利用率可以考虑“多进程+协程”的模式。

历史回顾
Python 2.2：第一次提出了生成器（最初称之为迭代器）的概念（PEP 255）。
Python 2.5：引入了将对象发送回暂停了的生成器这一特性即生成器的send()方法（PEP 342）。
Python 3.3：添加了yield from特性，允许从迭代器中返回任何值（注意生成器本身也是迭代器），这样我们就可以串联生成器并且重构出更好的生成器。
Python 3.4：引入asyncio.coroutine装饰器用来标记作为协程的函数，协程函数和asyncio及其事件循环一起使用，来实现异步I/O操作。
Python 3.5：引入了async和await，可以使用async def来定义一个协程函数，这个函数中不能包含任何形式的yield语句，但是可以使用return或await从协程中返回值。